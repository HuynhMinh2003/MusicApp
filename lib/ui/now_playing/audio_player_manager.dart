// Import th∆∞ vi·ªán 'just_audio' ƒë·ªÉ ph√°t √¢m thanh v√† 'rxdart' ƒë·ªÉ x·ª≠ l√Ω lu·ªìng d·ªØ li·ªáu.
import 'package:flutter/animation.dart';
import 'package:just_audio/just_audio.dart';
import 'package:rxdart/rxdart.dart';

// L·ªõp qu·∫£n l√Ω AudioPlayer.
class AudioPlayerManager {
  // Constructor n·ªôi b·ªô ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ t·∫°o m·ªôt instance duy nh·∫•t.
  AudioPlayerManager._internal();

  // T·∫°o instance singleton ƒë·ªÉ s·ª≠ d·ª•ng to√†n c·ª•c.
  static final AudioPlayerManager _instance = AudioPlayerManager._internal();

  // Ph∆∞∆°ng th·ª©c factory ƒë·ªÉ tr·∫£ v·ªÅ instance duy nh·∫•t.
  factory AudioPlayerManager() => _instance;

  // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng AudioPlayer t·ª´ th∆∞ vi·ªán 'just_audio'.
  final player = AudioPlayer();

  // Bi·∫øn stream ƒë·ªÉ cung c·∫•p tr·∫°ng th√°i ti·∫øn tr√¨nh √¢m thanh.
  Stream<DurationState>? durationState;

  // URL c·ªßa b√†i h√°t hi·ªán t·∫°i.
  String? songUrl;

  // T·∫°o AnimationController ƒë·ªÉ duy tr√¨ tr·∫°ng th√°i xoay ·∫£nh album
  AnimationController? rotationController;

  bool isPlaying = false; // üü¢ Tr·∫°ng th√°i nh·∫°c (ƒëang ph√°t ho·∫∑c d·ª´ng)

  // Ph∆∞∆°ng th·ª©c chu·∫©n b·ªã ph√°t b√†i h√°t.
  Future<void> prepare({bool isNewSong = false}) async{
    // N·∫øu ch∆∞a c√≥ URL, kh√¥ng l√†m g√¨ c·∫£
    if (songUrl == null || songUrl!.isEmpty) return;
    // K·∫øt h·ª£p lu·ªìng v·ªã tr√≠ ph√°t v√† s·ª± ki·ªán ph√°t ƒë·ªÉ t·∫°o ra tr·∫°ng th√°i ti·∫øn tr√¨nh.
    durationState = Rx.combineLatest2<Duration, Duration?, DurationState>(
        player.positionStream, // V·ªã tr√≠ ph√°t ht.
        player.durationStream, // T·ªïng th·ªùi l∆∞·ª£ng bh.
            (position, total) =>
            DurationState( // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng DurationState.
                progress: position, // Th·ªùi gian ƒë√£ ph√°t.
                buffered: player.bufferedPosition, // Th·ªùi gian ƒë√£ t·∫£i tr∆∞·ªõc.
                total: total ?? Duration.zero,)); // T·ªïng th·ªùi gian b√†i h√°t.

    // N·∫øu l√† b√†i h√°t m·ªõi, thi·∫øt l·∫≠p URL cho player.
    if (isNewSong) {
      await player.setUrl(songUrl!);
    }
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t URL c·ªßa b√†i h√°t.
  Future<void> updateSongUrl(String url) async{
    if (url != songUrl) {
      songUrl = url;
      await prepare(isNewSong: true);
    }else {
      await prepare(isNewSong: false); // G·ªçi l·∫°i prepare() ƒë·ªÉ ƒë·∫£m b·∫£o tr√¨nh ph√°t ho·∫°t ƒë·ªông
    }
  }

  // // Ph∆∞∆°ng th·ª©c ph√°t nh·∫°c
  // Future<void> play() async {
  //   if (player.playing) return;
  //   await player.play();
  // }
  //
  // // Ph∆∞∆°ng th·ª©c t·∫°m d·ª´ng nh·∫°c
  // Future<void> pause() async {
  //   await player.pause();
  // }
  //
  // // Ph∆∞∆°ng th·ª©c d·ª´ng nh·∫°c
  // Future<void> stop() async {
  //   await player.stop();
  // }

  // Ph∆∞∆°ng th·ª©c gi·∫£i ph√≥ng t√†i nguy√™n khi kh√¥ng c√≤n s·ª≠ d·ª•ng.
  void dispose() {
    //player.dispose(); // D·ª´ng v√† gi·∫£i ph√≥ng AudioPlayer.
  }
}

// L·ªõp l∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa th·ªùi l∆∞·ª£ng b√†i h√°t.
class DurationState {
  const DurationState({
    required this.progress, // Th·ªùi gian ƒë√£ ph√°t.
    required this.buffered, // Th·ªùi gian ƒë√£ t·∫£i tr∆∞·ªõc.
    this.total, // T·ªïng th·ªùi gian b√†i h√°t (c√≥ th·ªÉ null).
  });

  final Duration progress; // Ti·∫øn tr√¨nh ph√°t.
  final Duration buffered; // Ti·∫øn tr√¨nh t·∫£i.
  final Duration? total; // T·ªïng th·ªùi gian (c√≥ th·ªÉ null n·∫øu ch∆∞a x√°c ƒë·ªãnh).
}
