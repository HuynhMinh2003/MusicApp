import 'dart:math';

import 'package:audio_video_progress_bar/audio_video_progress_bar.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';

import '../../data/model/song.dart';
import 'audio_player_manager.dart';

class NowPlaying extends StatelessWidget {
  const NowPlaying({super.key, required this.playingSong, required this.songs});

  final Song playingSong;
  final List<Song> songs;

  @override
  Widget build(BuildContext context) {
    return NowPlayingPage(
      songs: songs,
      playingSong: playingSong,
    );
  }
}

class NowPlayingPage extends StatefulWidget {
  const NowPlayingPage({
    super.key,
    required this.songs,
    required this.playingSong,
  });

  final Song playingSong;
  final List<Song> songs;

  @override
  State<NowPlayingPage> createState() => _NowPlayingPageState();
}

class _NowPlayingPageState extends State<NowPlayingPage>
    with SingleTickerProviderStateMixin {
  late AnimationController
      _imageAnimController; // Qu·∫£n l√Ω ho·∫°t ·∫£nh xoay ·∫£nh album
  late AudioPlayerManager _audioPlayerManager; // Qu·∫£n l√Ω ph√°t nh·∫°c
  late int _selectedItemIndex; // Ch·ªâ s·ªë b√†i h√°t ƒëang ƒë∆∞·ª£c ch·ªçn
  late Song _song; // B√†i h√°t hi·ªán t·∫°i
  late double _currentAnimationPosition = 0.0; // V·ªã tr√≠ hi·ªán t·∫°i c·ªßa ho·∫°t ·∫£nh
  bool _isShuffle = false; // Tr·∫°ng th√°i tr·ªôn b√†i
  late LoopMode _loopMode; // Ch·∫ø ƒë·ªô l·∫∑p l·∫°i b√†i h√°t

  //ƒêo·∫°n code tr√™n n·∫±m trong ph∆∞∆°ng th·ª©c initState() c·ªßa m·ªôt StatefulWidget trong Flutter. Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi m·ªôt l·∫ßn khi widget ƒë∆∞·ª£c kh·ªüi t·∫°o v√† ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thi·∫øt l·∫≠p tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa widget.
  // ƒêo·∫°n m√£ n√†y ch·ªß y·∫øu ƒë∆∞·ª£c thi·∫øt k·∫ø cho m·ªôt ·ª©ng d·ª•ng ph√°t nh·∫°c, c√≥ c√°c ch·ª©c nƒÉng nh∆∞ qu·∫£n l√Ω b√†i h√°t, thi·∫øt l·∫≠p ho·∫°t ·∫£nh (animation), v√† c·∫•u h√¨nh ch·∫ø ƒë·ªô ph√°t nh·∫°c.
  @override
  void initState() {
    super.initState();
    _currentAnimationPosition = 0.0;
    _song = widget.playingSong; //L·∫•y b√†i h√°t hi·ªán t·∫°i
    // _imageAnimController = AnimationController(
    //   vsync: this,
    //   duration: const Duration(milliseconds: 12000),
    // );
    // L·∫•y AnimationController t·ª´ AudioPlayerManager
    // L·∫Øng nghe tr·∫°ng th√°i c·ªßa AudioPlayer
    _imageAnimController = AudioPlayerManager().rotationController ??
        AnimationController(
          vsync: this,
          duration: const Duration(seconds: 10), // Xoay 1 v√≤ng trong 10 gi√¢y
        ); // L·∫∑p v√¥ h·∫°n

    // C·∫≠p nh·∫≠t l·∫°i controller ƒë·ªÉ d√πng l·∫ßn sau
    AudioPlayerManager().rotationController = _imageAnimController;

    // üõë Ch·ªâ xoay n·∫øu nh·∫°c ƒëang ph√°t
    if (AudioPlayerManager().isPlaying) {
      _imageAnimController.repeat();
    }

    _audioPlayerManager =
        AudioPlayerManager(); //Qu·∫£n l√Ω c√°c h√†nh ƒë·ªông nh∆∞ ph√°t, d·ª´ng, chu·∫©n b·ªã b√†i h√°t m·ªõi, v√† x·ª≠ l√Ω c√°c s·ª± ki·ªán li√™n quan ƒë·∫øn √¢m thanh.

    if (_audioPlayerManager.songUrl?.compareTo(_song.source) != 0) {
      _audioPlayerManager.updateSongUrl(_song.source);
      _audioPlayerManager.prepare(isNewSong: true);
    } else {
      _audioPlayerManager.prepare(isNewSong: false);
    }

    _selectedItemIndex = widget.songs.indexOf(widget.playingSong);
    // X√°c ƒë·ªãnh ch·ªâ s·ªë b√†i h√°t
    _loopMode = LoopMode.off; // M·∫∑c ƒë·ªãnh l√† kh√¥ng l·∫∑p
  }

  //gi·∫£i ph√≥ng b·ªô nh·ªõ
  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    const delta = 64;
    return CupertinoPageScaffold(
        navigationBar: CupertinoNavigationBar(
          middle: const Text(
            'Now Playing',
          ),
          trailing:
              IconButton(onPressed: () {}, icon: const Icon(Icons.more_horiz)),
        ),
        child: Scaffold(
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(
                  height: 16,
                ),
                Text(_song.album),
                const SizedBox(
                  height: 16,
                ),
                const Text('_ ___ _ '),
                const SizedBox(
                  height: 48,
                ),

                // ·∫¢nh nh·∫°c xoay c√≥ vi·ªÅn ƒëƒ©a v√† l·ªó trung t√¢m
                Stack(
                  alignment: Alignment.center,
                  children: [
                    // Vi·ªÅn ƒëƒ©a nh·∫°c
                    Container(
                      width: screenWidth - delta + 20,
                      // K√≠ch th∆∞·ªõc l·ªõn h∆°n ·∫£nh m·ªôt ch√∫t
                      height: screenWidth - delta + 20,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Colors.black,
                        // M√†u n·ªÅn gi·ªëng ƒëƒ©a nh·∫°c
                        border:
                            Border.all(color: Colors.grey.shade800, width: 4),
                        // Vi·ªÅn ngo√†i
                        boxShadow: const [
                          BoxShadow(
                            color: Colors.black45,
                            blurRadius: 8,
                            spreadRadius: 2,
                          ),
                        ],
                      ),
                    ),

                    // ·∫¢nh nh·∫°c xoay b√™n trong
                    RotationTransition(
                      turns: Tween(begin: 0.0, end: 1.0)
                          .animate(_imageAnimController),
                      child: ClipOval(
                        // C·∫Øt ·∫£nh th√†nh h√¨nh tr√≤n
                        child: FadeInImage.assetNetwork(
                          placeholder: 'assets/itunes_256.png',
                          // ·∫¢nh ch·ªù
                          image: _song.image,
                          width: screenWidth - delta,
                          height: screenWidth - delta,
                          fit: BoxFit.cover,
                          // ƒê·∫£m b·∫£o ·∫£nh ƒë·∫ßy ƒë·ªß trong v√πng
                          imageErrorBuilder: (context, error, stackTrace) {
                            return Image.asset(
                              'assets/itunes_256.png', // ·∫¢nh thay th·∫ø n·∫øu l·ªói
                              width: screenWidth - delta,
                              height: screenWidth - delta,
                              fit: BoxFit.cover,
                            );
                          },
                        ),
                      ),
                    ),
                    // // L·ªó nh·ªè ·ªü gi·ªØa ƒëƒ©a nh·∫°c
                    // Container(
                    //   width: 20, // K√≠ch th∆∞·ªõc l·ªó nh·ªè
                    //   height: 20,
                    //   decoration: BoxDecoration(
                    //     shape: BoxShape.circle,
                    //     color: Colors.black,
                    //     // M√†u ƒëen ƒë·ªÉ t·∫°o c·∫£m gi√°c l·ªó tr√™n ƒëƒ©a
                    //     border: Border.all(
                    //         color: Colors.grey.shade600,
                    //         width: 2), // Vi·ªÅn nh·∫π ƒë·ªÉ n·ªïi b·∫≠t
                    //   ),
                    // ),
                  ],
                ),

                // n√∫t share + t√™n + n√∫t tim
                Padding(
                  padding: const EdgeInsets.only(top: 64, bottom: 16),
                  child: SizedBox(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        // n√∫t share
                        IconButton(
                          onPressed: () {},
                          icon: const Icon(Icons.share_outlined),
                          color: Theme.of(context).colorScheme.primary,
                        ),

                        // t√™n
                        Column(
                          children: [
                            Text(
                              _song.title,
                              style: Theme.of(context)
                                  .textTheme
                                  .bodyMedium!
                                  .copyWith(
                                      color: Theme.of(context)
                                          .textTheme
                                          .bodyMedium!
                                          .color),
                            ),
                            const SizedBox(
                              height: 8,
                            ),
                            Text(
                              _song.artist,
                              style: Theme.of(context)
                                  .textTheme
                                  .bodyMedium!
                                  .copyWith(
                                      color: Theme.of(context)
                                          .textTheme
                                          .bodyMedium!
                                          .color),
                            )
                          ],
                        ),

                        //n√∫t tim
                        IconButton(
                          onPressed: () {},
                          icon: const Icon(Icons.favorite_outline),
                          color: Theme.of(context).colorScheme.primary,
                        )
                      ],
                    ),
                  ),
                ),

                Padding(
                  // thanh load ti·∫øn tr√¨nh ph√°t
                  padding: const EdgeInsets.only(
                    top: 32,
                    left: 24,
                    right: 24,
                    bottom: 16,
                  ),
                  child: _progressBar(),
                ),
                Padding(
                  // c√°c n√∫t t∆∞∆°ng t√°c nh·∫°c
                  padding: const EdgeInsets.only(
                    left: 24,
                    right: 24,
                  ),
                  child: _mediaButtons(),
                )
              ],
            ),
          ),
        ));
  }

  Widget _mediaButtons() {
    return SizedBox(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          MediaButtonControl(
              function: _setShuffle,
              icon: Icons.shuffle,
              color: _getShuffleColor(),
              size: 24),
          MediaButtonControl(
              function: _setPrevSong,
              icon: Icons.skip_previous,
              color: Colors.deepPurple,
              size: 36),
          _playButton(),
          MediaButtonControl(
              function: _setNextSong,
              icon: Icons.skip_next,
              color: Colors.deepPurple,
              size: 36),
          MediaButtonControl(
              function: _setupRepeatOption,
              icon: _repeatingIcon(),
              color: _getRepeatingIconColor(),
              size: 24),
        ],
      ),
    );
  }

  void _setShuffle() {
    setState(() {
      _isShuffle = !_isShuffle;
    });
  }

  Color? _getShuffleColor() {
    return _isShuffle ? Colors.deepPurple : Colors.grey;
  }

  void _setNextSong() {
    if (widget.songs.isEmpty) return; // N·∫øu danh s√°ch r·ªóng, tho√°t

    if (_isShuffle) {
      var random = Random();
      _selectedItemIndex = random.nextInt(widget.songs.length);
    } else if (_selectedItemIndex < widget.songs.length - 1) {
      ++_selectedItemIndex;
    } else if (_loopMode == LoopMode.all) {
      _selectedItemIndex = 0;
    }

    // L·∫•y b√†i h√°t m·ªõi
    final nextSong = widget.songs[_selectedItemIndex];

    print("üéµ Chuy·ªÉn sang b√†i h√°t m·ªõi: ${nextSong.title}"); // Debug log

    // C·∫≠p nh·∫≠t tr√¨nh ph√°t
    _audioPlayerManager.updateSongUrl(nextSong.source);

    // C·∫≠p nh·∫≠t UI
    setState(() {
      _song = nextSong;
    });
  }

  void _setPrevSong() {
    if (widget.songs.isEmpty) return; // N·∫øu danh s√°ch r·ªóng, tho√°t

    if (_isShuffle) {
      var random = Random();
      _selectedItemIndex = random.nextInt(widget.songs.length);
    } else if (_selectedItemIndex > 0) {
      --_selectedItemIndex;
    } else if (_loopMode == LoopMode.all) {
      _selectedItemIndex = widget.songs.length - 1;
    }

    // L·∫•y b√†i h√°t m·ªõi
    final prevSong = widget.songs[_selectedItemIndex];

    // C·∫≠p nh·∫≠t tr√¨nh ph√°t
    _audioPlayerManager.updateSongUrl(prevSong.source);

    // C·∫≠p nh·∫≠t UI
    setState(() {
      _song = prevSong;
    });
  }

  void _setupRepeatOption() {
    setState(() {
      if (_loopMode == LoopMode.off) {
        _loopMode = LoopMode.one;
      } else if (_loopMode == LoopMode.one) {
        _loopMode = LoopMode.all;
      } else {
        _loopMode = LoopMode.off;
      }

      _audioPlayerManager.player.setLoopMode(_loopMode);
    });
  }

  IconData _repeatingIcon() {
    return switch (_loopMode) {
      LoopMode.one => Icons.repeat_one,
      LoopMode.all => Icons.repeat_on,
      _ => Icons.repeat,
    };
  }

  Color? _getRepeatingIconColor() {
    return _loopMode == LoopMode.off ? Colors.grey : Colors.deepPurple;
  }

  //ph·∫ßn seekbar
  StreamBuilder<DurationState> _progressBar() {
    return StreamBuilder<DurationState>(
      stream: _audioPlayerManager.durationState,
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Center(
              child:
                  CircularProgressIndicator()); // Hi·ªÉn th·ªã loading khi ch∆∞a c√≥ d·ªØ li·ªáu
        }

        final durationState = snapshot.data!;
        // final progress = durationState.progress ?? Duration.zero;
        // final buffered = durationState.buffered ?? Duration.zero;
        // final total = durationState.total ?? Duration.zero;

        return ProgressBar(
          progress: durationState.progress,
          total: durationState.total ?? Duration.zero,
          buffered: durationState.buffered,
          onSeek: _audioPlayerManager.player.seek,
          barHeight: 5.0,
          barCapShape: BarCapShape.round,
          baseBarColor: Colors.grey.withOpacity(0.3),
          progressBarColor: Colors.green,
          bufferedBarColor: Colors.grey.withOpacity(0.3),
          thumbColor: Colors.deepPurple,
          thumbGlowColor: Colors.green.withOpacity(0.3),
          thumbRadius: 10.0,
        );
      },
    );
  }

  // StreamBuilder<PlayerState> _playButton() {
  //   return StreamBuilder(
  //     // Stream l·∫Øng nghe tr·∫°ng th√°i c·ªßa player
  //       stream: _audioPlayerManager.player.playerStateStream,
  //       builder: (context, snapshot)
  //       {
  //         // L·∫•y d·ªØ li·ªáu PlayerState t·ª´ snapshot
  //         final playState = snapshot.data;
  //
  //         // L·∫•y tr·∫°ng th√°i x·ª≠ l√Ω c·ªßa player (loading, buffering, ready, completed, ...)
  //         final processingState = playState?.processingState;
  //
  //         // Ki·ªÉm tra xem player c√≥ ƒëang ph√°t nh·∫°c kh√¥ng
  //         final playing = playState?.playing;
  //
  //         // X·ª≠ l√Ω khi player ƒëang t·∫£i (loading) ho·∫∑c buffer (buffering)
  //         if (processingState == ProcessingState.loading ||
  //             processingState == ProcessingState.buffering) {
  //           return Container(
  //             margin: const EdgeInsets.all(8), // CƒÉn l·ªÅ xung quanh n√∫t
  //             width: 48, // Chi·ªÅu r·ªông c·ªßa container
  //             height: 48, // Chi·ªÅu cao c·ªßa container
  //             child: const CircularProgressIndicator(), // Hi·ªÉn th·ªã v√≤ng tr√≤n xoay (loading)
  //           );
  //         }
  //
  //         // X·ª≠ l√Ω khi player kh√¥ng ph√°t (paused ho·∫∑c ch∆∞a ph√°t)
  //         else if (playing != true) {
  //           return MediaButtonControl(
  //             // H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n n√∫t Play
  //               function: () {
  //                 _audioPlayerManager.player.play(); // B·∫Øt ƒë·∫ßu ph√°t nh·∫°c
  //
  //                 // Ti·∫øn h√†nh ho·∫°t ƒë·ªông v·ªõi animation:
  //                 // Ti·∫øp t·ª•c ho·∫°t ·∫£nh t·ª´ v·ªã tr√≠ hi·ªán t·∫°i v√† l·∫∑p l·∫°i
  //                 _imageAnimController.forward(from: _currentAnimationPosition);
  //                 _imageAnimController.repeat();
  //               },
  //               icon: Icons.play_arrow, // Icon n√∫t Play
  //               color: null, // M√†u c·ªßa n√∫t (null: s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh)
  //               size: 48); // K√≠ch th∆∞·ªõc c·ªßa n√∫t
  //         }
  //
  //         // X·ª≠ l√Ω khi player ƒëang ph√°t nh∆∞ng ch∆∞a ho√†n t·∫•t b√†i h√°t
  //         else if (processingState != ProcessingState.completed) {
  //           return MediaButtonControl(
  //             // H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n n√∫t Pause
  //               function: () {
  //                 _audioPlayerManager.player.pause(); // T·∫°m d·ª´ng ph√°t nh·∫°c
  //
  //                 // D·ª´ng ho·∫°t ·∫£nh
  //                 _imageAnimController.stop();
  //
  //                 // L∆∞u v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ho·∫°t ·∫£nh
  //                 _currentAnimationPosition = _imageAnimController.value;
  //               },
  //               icon: Icons.pause, // Icon n√∫t Pause
  //               color: null,
  //               size: 48);
  //         }
  //
  //         // X·ª≠ l√Ω khi b√†i h√°t ƒë√£ ho√†n t·∫•t ph√°t
  //         else {
  //           if (processingState == ProcessingState.completed) {
  //             _imageAnimController.stop();
  //             _currentAnimationPosition = 0.0;
  //
  //             // Ki·ªÉm tra n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô l·∫∑p to√†n b·ªô th√¨ ph√°t b√†i ti·∫øp theo
  //             if (_loopMode == LoopMode.all || _loopMode == LoopMode.off) {
  //               _setNextSong(); // H√†m chuy·ªÉn b√†i
  //             } else {
  //               // N·∫øu l·∫∑p 1 b√†i th√¨ ph√°t l·∫°i t·ª´ ƒë·∫ßu
  //               _audioPlayerManager.player.seek(Duration.zero);
  //               _audioPlayerManager.player.play();
  //               _imageAnimController.forward(from: 0);
  //               _imageAnimController.repeat();
  //             }
  //           }
  //           return const SizedBox.shrink(); // ·∫®n n√∫t Replay khi auto chuy·ªÉn b√†i
  //         }
  //
  //         //   // X·ª≠ l√Ω khi b√†i h√°t ƒë√£ ho√†n t·∫•t ph√°t
  //         //   else {
  //         // // Khi tr·∫°ng th√°i l√† completed => Ki·ªÉm tra ch·∫ø ƒë·ªô l·∫∑p
  //         // if (processingState == ProcessingState.completed) {
  //         // _imageAnimController.stop(); // D·ª´ng ho·∫°t ·∫£nh
  //         // _currentAnimationPosition = 0.0; // Reset v·ªã tr√≠ ho·∫°t ·∫£nh v·ªÅ 0
  //         // }
  //         //
  //         // return MediaButtonControl(
  //         // function: () {
  //         // // N·∫øu kh√¥ng ·ªü LoopMode.all, ph√°t l·∫°i b√†i hi·ªán t·∫°i
  //         // _imageAnimController.forward(from: _currentAnimationPosition);
  //         // _imageAnimController.repeat();
  //         //
  //         // // Ph√°t l·∫°i b√†i h√°t t·ª´ ƒë·∫ßu
  //         // _audioPlayerManager.player.seek(Duration.zero);
  //         // },
  //         // icon: Icons.replay, // Icon thay ƒë·ªïi t√πy theo ch·∫ø ƒë·ªô
  //         // color: null,
  //         // size: 48,
  //         // );
  //         // }
  //       });
  // }

  StreamBuilder<PlayerState> _playButton() {
    return StreamBuilder(
      stream: _audioPlayerManager.player.playerStateStream,
      builder: (context, snapshot) {
        final playState = snapshot.data;
        final processingState = playState?.processingState;
        final playing = playState?.playing;

        if (processingState == ProcessingState.loading ||
            processingState == ProcessingState.buffering) {
          return Container(
            margin: const EdgeInsets.all(8),
            width: 48,
            height: 48,
            child: const CircularProgressIndicator(),
          );
        }

        // N·∫øu player ch∆∞a ph√°t
        if (playing != true) {
          return MediaButtonControl(
            function: () {
              _audioPlayerManager.player.play();
              _imageAnimController.forward(from: _currentAnimationPosition);
              _imageAnimController.repeat();
            },
            icon: Icons.play_arrow,
            color: null,
            size: 48,
          );
        }

        // N·∫øu player ƒëang ph√°t
        if (processingState != ProcessingState.completed) {
          return MediaButtonControl(
            function: () {
              _audioPlayerManager.player.pause();
              _imageAnimController.stop();
              _currentAnimationPosition = _imageAnimController.value;
            },
            icon: Icons.pause,
            color: null,
            size: 48,
          );
        }

        // Khi b√†i h√°t k·∫øt th√∫c
        if (processingState == ProcessingState.completed) {
          // _imageAnimController.stop();
          // _currentAnimationPosition = 0.0;

          if (_loopMode == LoopMode.all || _loopMode == LoopMode.off) {
            // Chuy·ªÉn sang b√†i h√°t ti·∫øp theo
            Future.microtask(() {
              setState(() {
                _setNextSong();
              });
            });
          } else {
            // L·∫∑p l·∫°i b√†i h√°t
            _audioPlayerManager.player.seek(Duration.zero);
            _audioPlayerManager.player.play();
            _imageAnimController.forward(from: 0);
            _imageAnimController.repeat();
          }
        }

        return const SizedBox.shrink(); // ·∫®n n√∫t khi auto chuy·ªÉn b√†i
      },
    );
  }
}

class MediaButtonControl extends StatefulWidget {
  const MediaButtonControl({
    super.key,
    required this.function,
    required this.icon,
    required this.color,
    required this.size,
  });

  final void Function()? function;
  final IconData icon;
  final double? size;
  final Color? color;

  @override
  State<StatefulWidget> createState() => _MediaButtonControlState();
}

class _MediaButtonControlState extends State<MediaButtonControl> {
  @override
  Widget build(BuildContext context) {
    return IconButton(
      onPressed: widget.function,
      icon: Icon(widget.icon),
      iconSize: widget.size,
      color: widget.color ?? Theme.of(context).colorScheme.primary,
    );
  }
}
